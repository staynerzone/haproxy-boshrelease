---
name: haproxy

description: "The HAProxy server can be used to terminate SSL in front of the Routers. Each HAProxy instance should point to multiple Routers."

packages:
- haproxy
- ttar

templates:
  haproxy_wrapper:            bin/haproxy_wrapper
  drain.erb:                  bin/drain
  bpm.yml:                    config/bpm.yml
  haproxy.config.erb:         config/haproxy.config
  certs.ttar.erb:             config/certs.ttar
  ssl_redirect.map.erb:       config/ssl_redirect.map
  backend-ca-certs.erb:       config/backend-ca-certs.pem
  client-ca-certs.erb:        config/client-ca-certs.pem
  backend-crt.erb:            config/backend-crt.pem
  client-revocation-list.erb: config/client-revocation-list.pem
  blacklist_cidrs.txt.erb:    config/blacklist_cidrs.txt
  whitelist_cidrs.txt.erb:    config/whitelist_cidrs.txt

consumes:
  - name: http_backend
    type: http-router
    optional: true

  - name: tcp_backend
    type: ssh_proxy
    optional: true

  - name: tcp_router
    type: tcp-router
    optional: true

properties:
  ha_proxy.threads:
    description: "Optional number of processes per VM (DEPRECATED, PLEASE USE nbproc)"
    default: 1
  ha_proxy.nbproc:
    description: "Optional number of processes per VM"
    default: 1
  ha_proxy.nbthread:
    description: "Optional number of threads per VM (EXPERIMENTAL)"
    default: 1
  ha_proxy.syslog_server:
    description: "An IPv4 address optionally followed by a colon and a UDP port. It can also be an IPv6 address or filesystem path to a UNIX domain socket."
    default: "/dev/log"
  ha_proxy.log_level:
    description: "Log level"
    default: "info"
  ha_proxy.buffer_size_bytes:
    description: "Buffer size to use for requests, any requests larger than this (large cookies or query strings) will result in a gateway error"
    default: 16384
  ha_proxy.internal_only_domains:
    description: "Array of domains for internal-only apps/services (not hostnames for the apps/services)"
    default: []
  ha_proxy.trusted_domain_cidrs:
    description: "Space separated trusted cidr blocks for internal_only_domains"
    default: 0.0.0.0/32
  ha_proxy.strict_sni:
    description: "Optional setting to decide whether the SSL/TLS negotiation is allowed only if the client provided an SNI which strict match a certificate. If set to true, the default certificate is not used"
    default: false
  ha_proxy.ssl_pem:
    description: |
      Array of private keys and certificates used for TLS handshakes with downstream clients. Each element in the array is an object containing fields 'cert_chain' and 'private_key',
      each of which supports a PEM block. Each element can also be a single string containing the cert chain and the private key.
    example:
      ssl_pem:
      - cert_chain: |
          -----BEGIN CERTIFICATE-----
          -----END CERTIFICATE-----
          -----BEGIN CERTIFICATE-----
          -----END CERTIFICATE-----
        private_key: |
          -----BEGIN RSA PRIVATE KEY-----
          -----END RSA PRIVATE KEY-----
      - |
        -----BEGIN CERTIFICATE-----
        -----END CERTIFICATE-----
        -----BEGIN CERTIFICATE-----
        -----END CERTIFICATE-----
        -----BEGIN RSA PRIVATE KEY-----
        -----END RSA PRIVATE KEY-----
    default: ~
  ha_proxy.crt_list:
    description: |
      Array of private keys and certificates used for TLS handshakes with downstream clients. Each element in the array is an object containing at least the field 'ssl_pem'.
      The field 'ssl_pem' itself is either an object containing fields 'cert_chain' and 'private_key', or a single string containing the cert chain and the private key.
      The following fields are optional:
      - 'client_ca_file' (replaces ha_proxy.client_ca_file)
      - 'verify' (allowed values: [none|optional|required])
      - 'ssl_ciphers' (overrides ha_proxy.ssl_ciphers)
      - 'client_revocation_list' (replaces ha_proxy.client_revocation_list)
      - 'snifilter' (either a string or an array of strings)
      The global option ha_proxy.client_cert has to be set to 'true', if there are crt_list entries with mutual auth configuration ('client_ca_file', 'client_revocation_list' and 'verify'!='none')
      To avoid confusing configurations, it's not allowed to specify 'client_ca_file' and 'client_revocation_list' both globally AND in crt_list entries.
    example:
      crt_list:
      - ssl_pem: |
          -----BEGIN CERTIFICATE-----
          -----END CERTIFICATE-----
          -----BEGIN CERTIFICATE-----
          -----END CERTIFICATE-----
          -----BEGIN RSA PRIVATE KEY-----
          -----END RSA PRIVATE KEY-----
      - ssl_pem:
          cert_chain: |
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
          private_key: |
            -----BEGIN RSA PRIVATE KEY-----
            -----END RSA PRIVATE KEY-----
        client_ca_file: |
          -----BEGIN CERTIFICATE-----
          -----END CERTIFICATE-----
          -----BEGIN CERTIFICATE-----
          -----END CERTIFICATE-----
        verify: required
        ssl_ciphers: AES:ALL:!aNULL:!eNULL:+RC4:@STRENGTH
        client_revocation_list: |
          -----BEGIN X509 CRL-----
          -----END X509 CRL-----
          -----BEGIN X509 CRL-----
          -----END X509 CRL-----
        snifilter:
        - "*.domain.tld"
        - "!secure.domain.tld"
    default: ~
  ha_proxy.backend_ca_file:
    description: "Optional SSL CA certificate chain (PEM file) concatenated together for backend SSL servers, only used when one of the `backend_ssl` options is set to `verify`"
  ha_proxy.enable_health_check_http:
    description: "Optionally enable http health-check on `haproxy_ip:8080/health`. It shows `200 OK` if >0 backend servers are up."
    default: false
  ha_proxy.health_check_port:
    description: "port for http health-check"
    default: 8080
  ha_proxy.disable_http:
    description: "Disable port 80 traffic"
    default: false
  ha_proxy.enable_4443:
    description: "Enables port 4443 for backwards compatibility with WSS-based apps using the old CF haproxy"
    default: false
  ha_proxy.https_redirect_domains:
    description: "For each domain in this array, a HTTPS redirect rule will be put in the config file. Redirect will be applied for all subdomains"
    default: []
  ha_proxy.https_redirect_all:
    description: "If this is set to 'true', a https redirect rule for all http calls will be put in the config file"
    default: false
  ha_proxy.ssl_ciphers:
    default: ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS
    description: "List of SSL Ciphers that are passed to HAProxy"
  ha_proxy.hsts_enable:
    default: false
    description: "Enables HSTS(Strict-Transport-Security Header) for all the SSL/TLS listeners"
  ha_proxy.hsts_max_age:
    default: 31536000
    description: "max-age value for the Strict-Transport-Security header"
  ha_proxy.hsts_include_subdomains:
    default: false
    description: "This enables the includeSubDomains flag for HSTS."
  ha_proxy.hsts_preload:
    default: false
    description: "This enables the preload flag for HSTS"
  ha_proxy.default_dh_param:
    default: 2048
    description: "Maximum size of DH params when generating epmehmeral keys during key exchange"
  ha_proxy.disable_tls_tickets:
    default: true
    description: "Improve (Perfect) Forward Secrecy by disabling TLS tickets"
  ha_proxy.disable_tls_10:
    default: false
    description: "Disable TLS 1.0 in HA Proxy"
  ha_proxy.disable_tls_11:
    default: false
    description: "Disable TLS 1.1 in HA Proxy"

  ha_proxy.connect_timeout:
    description: "Timeout (in floating point seconds) used on connections from haproxy to a backend, while waiting for the TCP handshake to complete + connection to establish"
    default:     5
  ha_proxy.client_timeout:
    description: "Timeout (in floating point seconds) used on connections from a client to haproxy that have gone inactive"
    default:     30
  ha_proxy.server_timeout:
    description: "Timeout (in floating point seconds) used on connections from haproxy to a backend, while waiting for data from the backend"
    default:     30
  ha_proxy.websocket_timeout:
    description: "Timeout (in floating point seconds) used on websocket/tunnel traffic, when both ends of the conversation have become inactive"
    default:     3600
  ha_proxy.keepalive_timeout:
    description: "Timeout (in floating point seconds) applied to any connection that is in an http-keepalive state, waiting for the next request to occur"
    default:     6
  ha_proxy.request_timeout:
    description: "Timeout (in floating point seconds) applied to any connection to limit the maximum time for a complete HTTP request (headers only). Used to limit DoS attacks that send data slowly to not trigger the client/server timeouts"
    default:     5
  ha_proxy.queue_timeout:
    description: "Timeout (in floating point seconds) used on any connection sitting in the pending queue, waiting to be sent to the backend, to limit its time being queued"
    default:     30

  ha_proxy.stats_enable:
    description: "If true, haproxy will enable a socket for stats. You can see the stats on `haproxy_ip:9000/haproxy_stats`. If multithreading is enabled (`ha_proxy.threads > 1`) haproxy will create a separate socket and stat page for each thread. Each stat page is reachable on a different port ranging from `9000` to `9000 + ha_proxy.threads - 1`."
    default: false
  ha_proxy.stats_bind:
    description: "Define listening address and port for the stats frontend. If multithreading is enabled (`ha_proxy.threads > 1`) multiple stat pages are available - one for each thread. You can see the stat page for each thread on a separate port - starting at the defined port number."
    default: "*:9000"
  ha_proxy.stats_user:
    description: "User name to authenticate haproxy stats"
  ha_proxy.stats_password:
    description: "Password to authenticate haproxy stats"
  ha_proxy.stats_uri:
    description: "URI used to access the stats UI."
    default: "haproxy_stats"
  ha_proxy.trusted_stats_cidrs:
    description: "Trusted ip range that can access the stats UI"
    default: 0.0.0.0/32

  ha_proxy.backend_servers:
    description: "Array of the router IPs acting as the HTTP/TCP backends (should include servers all Availability Zones being used)"
    default: []
  ha_proxy.backend_ssl:
    description: "Optionally enable SSL verification for backend servers, one of `verify`, `noverify`, any other value assumes no ssl backend.  Setting `verify` requires `ha_proxy.backend_ca_file` key to be set."
    default: "off"
  ha_proxy.backend_ssl_verifyhost:
    description: "Optional hostname to verify in the x509 certificate subject for SSL-enabled backend servers.  Requires `ha_proxy.backend_ssl` is set to `verify` when using this."
  ha_proxy.backend_port:
    description: "Listening port for Router"
    default: 80
  ha_proxy.compress_types:
    description: "If this property is set, gzip compression will be activated for the mime types named in this property. definition like 'text/html text/plain text/css'"
    default: ""
  ha_proxy.routed_backend_servers:
    description: "Hash of the URL prefixes -> array of the router IPs acting as the HTTP/TCP backends (should include servers all Availability Zones being used)"
    default: {}
    example:
      routed_backend_servers:
        /images:
          servers: [10.0.0.2, 10.0.0.3]  # required - list of backend IPs to connect to
          port: 4443       # required - port haproxy should listen on
          backend_ssl: "verify"  # optional - enables ssl backend, one of `verify`, `noverify`, any other value assumes no ssl backend.
                                 # Setting `verify` requires `ha_proxy.backend_ca_file` key to be set.
          backend_verifyhost: example.com # optional - hostname to verify in the x509 certificate subject for SSL-enabled backend servers
                                          # only used if backend_ssl: `verify` is set
          backend_use_http_health:  true    # optional, defaults to false. enables http based health checks for the backend
          backend_http_health_port: 80      # optional, defaults to the port of the backend server. sets the port for the http backend health check
          backend_http_health_uri:  /health # optional, defaults to /health. sets the URI for backend http health checks

  ha_proxy.headers:
    description: "Hash of custom headers you wish you have set on each request. Spaces are automatically escaped, but any other haproxy delimiters will need to be escaped manually"
    example: |
      headers:
        X-Application-ID: my-custom-header
        MyCustomHeader: 3

  ha_proxy.rsp_headers:
    description: "Hash of custom headers you wish you have set on each request. Spaces are automatically escaped, but any other haproxy delimiters will need to be escaped manually"
    example: |
      rsp_headers:
        X-Application-ID: my-custom-header
        MyCustomHeader: 3

  ha_proxy.backend_crt:
    description: "provides client certificate to backend server to do mutual ssl"
    example: |
      -----BEGIN CERTIFICATE-----
      ******
      -----END CERTIFICATE-----
      -----BEGIN PRIVATE KEY-----
      ******
      -----END PRIVATE KEY-----
  ha_proxy.client_cert:
    description: "Enable haproxy mutual auth and produce a client cert header (X-Forwarded-Client-Cert) to offload mutual ssl client certificate to backend"
    default: false

  ha_proxy.forwarded_client_cert:
    description: |
      This option lets you decide how to handle the X-Forwarded-Client-Cert (XFCC) http header on any https frontend.
      On http frontends the `always_forward_only` option is active by default and can't be changed.
      On https frontends your options are (ordered from least to most secure):
      - always_forward_only:
          Least secure option. Always forward the XFCC header in the request, regardless of whether the client connection is mTLS.
          Use this value when your load balancer is forwarding the client certificate and requests are not forwarded to HAProxy over mTLS.
          In the case where the connection between load balancer and HAProxy is mTLS, the client certificate received by HAProxy in the mTLS handshake will not be forwarded.
      - forward_only:
          Secure version of `always_forward_only`. Forward the XFCC header received from the client only when the client connection is mTLS.
          The client certificate received by HAProxy in the mTLS handshake will not be forwarded.
      - sanitize_set:
          Most secure option. Strip any instances of XFCC headers from the client request.
          When the client connection is mTLS, the client certificate received by HAProxy in the mTLS handshake will be forwarded in this header.
          Values will be base64 encoded PEM. Use this value when HAProxy is the first component to terminate TLS.
    default: sanitize_set

  ha_proxy.client_ca_file:
    description: "path for CA certs to validate client certificate"
    example: |
      -----BEGIN CERTIFICATE-----
      ******
      -----END CERTIFICATE-----
      -----BEGIN PRIVATE KEY-----
      ******
      -----END PRIVATE KEY-----

  ha_proxy.client_cert_ignore_err:
    description: "Error code(s) to ignore from verifying a client cert during a mutual ssl handshake, in a pipe-separated list. For example, 2 is if it cannot get the issuer certificate, 10 if the certificate has expired and 18 if the certificate is self-signed. The keyword 'all' will ignore all possible errors. See the openssl verify documentation [https://wiki.openssl.org/index.php/Manual:Verify(1)] for a full list of all error codes and their meanings."
    example: 2|10|18

  ha_proxy.client_revocation_list:
    description: "provide a list of revocation certs"

  ha_proxy.tcp:
    description: "List of mappings to perform tcp-based proxying on. See example for mapping datastructure and keys"
    default: []
    example:
      tcp:
        - name: wss        # required - name of backend
          port: 4443       # required - port haproxy should listen on
          backend_servers: # required - list of backend IPs to connect to
          - 10.20.10.10
          - 10.20.10.11
          balance: roundrobin # optional - sets algorithm used to select a server when doing load balancing
          backend_port: 80 # optional - sets backend port - otherwise defaults to `port`
          ssl: true        # optional - enables ssl, and uses the `ha_proxy.ssl_pem` provided key
          backend_ssl: "verify"  # optional - enables ssl backend, one of `verify`, `noverify`, any other value assumes no ssl backend.
                                 # Setting `verify` requires `ha_proxy.backend_ca_file` key to be set.
          backend_verifyhost: example.com # optional - hostname to verify in the x509 certificate subject for SSL-enabled backend servers
                                          # only used if backend_ssl: `verify` is set
          health_check_http: 4444 # optional port number - if provided a heath check http site is created at `haproxy_ip:4444/health`.
                                  # It shows `200 OK` if >0 backend servers are up.
  ha_proxy.tcp_link_port:
    description: "Port haproxy should listen on when using the tcp_backend link"
  ha_proxy.tcp_link_health_check_http:
    description: "Optional port for http health check when using the tcp_backend link."
  ha_proxy.resolvers:
    description: "List of DNS servers"
    example:
      resolvers:
      - private: 10.0.0.2
      - public: 8.8.8.8
  ha_proxy.dns_hold:
    description: "DNS Hold time"
    default: 10s
  ha_proxy.accept_proxy:
    description: "Turned off by default. Enforces the use of the PROXY protocol for all incoming connections to all frontends. When enabled standard tcp connections to these port no longer work."
    default: false
  ha_proxy.disable_tcp_accept_proxy:
    description: "Disables the PROXY protocol on tcp backends. Only applies if `ha_proxy.accept_proxy` is enabled."
    default: false
  ha_proxy.binding_ip:
    description: "If there are multiple ethernet interfaces, specify which one to bind"
    default: ""

  ha_proxy.cidr_blacklist:
    description: "List of CIDRs to block for http(s). Format is string array of CIDRs or single string of base64 encoded gzip."
    default: ~
    example:
      cidr_blacklist:
      - 10.0.0.0/8
      - 192.168.2.0/24
  ha_proxy.cidr_whitelist:
    description: "List of CIDRs to allow for http(s). Format is string array of CIDRs or single string of base64 encoded gzip."
    default: ~
    example:
      cidr_whitelist:
      - 172.168.4.1/32
      - 10.2.0.0/16
  ha_proxy.block_all:
    description: "Optionally block all incoming traffic to http(s). Use in conjunction with whitelist."
    default: false

  ha_proxy.tcp_routing.port_range:
    description: "A range of ports for haproxy to listen on to enable CF TCP Routing. Used only if 'tcp_router' link is present."
    default: 1024-1123

  ha_proxy.http_request_deny_conditions:
      description: "List of conditions to block http requests. Each condition consists of multiple rules combined with the AND operator"
      example:
        http_request_deny_conditions:
        - condition:
          - acl_name: block_host
            acl_rule: "hdr_beg(host) -i login"
          - acl_name: block_reset_password_url
            acl_rule: "path_beg,url_dec -m beg -i /reset_password"

  ha_proxy.lua_scripts:
    description: |
      A list of LUA scripts that HA Proxy should load. These will need to be provided
      by other boshreleases, as none are supplied in `haproxy_boshrelease`. Specify
      each script with the full path to the script (likely `/var/vcap/packages/something/something/darkside.lua`)
    default: []

  ha_proxy.backend_use_http_health:
    description: |
      Enables HTTP based health checks for the default backend
    default: false
  ha_proxy.backend_http_health_uri:
    description: URI to request when checking the health of a backend
    default: /health
  ha_proxy.backend_http_health_port:
    description: Port to check the backend health on
    default: 8080

  ha_proxy.global_config:
    description: |
      A block of raw HAProxy config that will be added to the HA proxy global section

  ha_proxy.frontend_config:
    description: |
      A block of raw HAProxy config that will be added to each HA proxy frontend definition

  ha_proxy.backend_config:
    description: |
      A block of raw HAProxy config that will be added to the default HTTP + routed HTTP backend definitions

  ha_proxy.tcp_backend_config:
    description: |
      A block of raw HAProxy config that will be added to the CF TCP Router + Generic TCP backend definitions

  ha_proxy.raw_config:
    description: |
      A multiline text blob of an entire haproxy config. Overrides every other
      option available, so you can provide your own config, and do whatever
      you want. Use at your own risk.
  ha_proxy.max_open_files:
    description: The number of file descriptors HAProxy can have open at one time
    default: 256000
  ha_proxy.max_connections:
    description: Number of simultanous connections HAProxy supports handling
    default: 64000
  ha_proxy.drain_enable:
    description: Send SIGUSR1 signal to all haproxy processes in a drain script in order to gracefully shutdown
    default: false
  ha_proxy.drain_timeout:
    description: Time in seconds after SIGUSR1 signal is sent in the drain script until monit stops the processes
    default: 30
  ha_proxy.drain_frontend_grace_time:
    description: Time in seconds after SIGUSR1 signal is sent in the drain script until the frontends stop accepting connections
    default: 0
